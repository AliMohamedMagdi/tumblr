scalar Upload
scalar DateTime

type Query {
  feed(filter: String, skip: Int, first: Int, orderBy: PostOrderByInput): Feed!
}

type Feed {
  posts: [Post!]!
  count: Int!
}

enum PostOrderByInput {
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
}

type Mutation {
  publish(picture: Upload, description: String!): Post!
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  like(postId: ID): Like
}

type Post {
  id: ID!
  description: String!
  op: User
  likes: [Like!]!
  imgUrl: String!
  createdAt: DateTime!
}

type Like {
  id: ID!
  post: Post!
  user: User!
}

type Subscription {
  newPost: Post
  newLike: Like
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  posts: [Post!]!
  likes: [Like!]!
}
